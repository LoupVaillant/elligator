{
    title: Glossary
    description: Terms used on this website
}

Glossary
========

This page describes various terms used on this website.


Elliptic Curve
--------------

If you need an introduction or a refresher,
we recommend the excellent [&ldquo;ECCHacks&rdquo; talk by Daniel
J.&nbsp;Bernstein and Tanja Lange][ECCHacks].

[ECCHacks]: https://media.ccc.de/v/31c3_-_6369_-_en_-_saal_1_-_201412272145_-_ecchacks_-_djb_-_tanja_lange

Pay special attention to when they talk about &ldquo;order&rdquo;.
Remember it specifies the number of points of the curve
when talking about the order of the curve,
but every point also has an order,
which is the number of points that it can generate itself.


Map and inverse map
-------------------

The Elligator map is the function that takes a uniformly random bit
string and converts it into an elliptic curve point.

The Elligator inverse map is the function that takes an elliptic curve
point and converts it into an uniformly random-looking bit string.


Decaf and Ristretto
-------------------

Decaf is an additional abstraction for twisted Edwards and
Montgomery curves with cofactor&nbsp;<var>h</var>&nbsp;=&nbsp;4
that operates by specifying an encoding and decoding.
In doing so, it ensures that no points that contain a low-order point
are ever encoded or decoded;
internally, low-order points may still happen,
but can be ignored because only cofactor-clean encodings and decodings
are ever consumed and emitted.
This ultimately allows treating a curve with a cofactor as if it had a
prime order &ndash; ideal for protocols that require prime order groups.

Ristretto extends Decaf for for twisted Edwards and
Montgomery curves with cofactor&nbsp;<var>h</var>&nbsp;=&nbsp;8.

More information can be found on the
[Ristretto website](https://ristretto.group/).


Constant-time implementation
----------------------------

To be safe, implementations of elliptic curve cryptography (or all
cryptography for that matter) must run in *constant-time*.
This means &ndash; among other things &ndash; no secret dependent
branches,
and no secret dependent indices:
secrets (and values derived from secrets, however indirectly),
must not be used in branches or as array indices.

The goal is to cut all flow of information from secrets to timings,
which would otherwise become a _side channel_ that could be used to
breach security,
often by recovering a secret key.

Thomas Pornin gives an [excellent in-depth explanation][BearSSL] on the
BearSSL website.

[BearSSL]: https://bearssl.org/constanttime.html
