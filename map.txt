{
    title: The Map
    description: Describes how to apply Elligator mathematically
}

The Elligator Map and Inverse Map
=================================

Elligator specifies two kinds of maps,
the &ldquo;map&rdquo; (or &ldquo;direct map&rdquo; for clarity)
and the &ldquo;inverse map&rdquo;.

The map is a function that takes a number <var>r</var> from an
elliptic curve&#8217;s finite field (which we call a
&ldquo;field element&rdquo;),
and produces a point
<var>P</var>&nbsp;=&nbsp;(<var>u</var>,&nbsp;<var>v</var>)
on that elliptic curve.
Note that the map is not quite injective:
<var>r</var> and &minus;<var>r</var> map to the same point.
Numbers that are neither equal nor opposite do map to different points
though.

The _inverse_ map is a function that takes as input an elliptic curve
point <var>P</var> and outputs a field element <var>r</var>.
We also call that number the &ldquo;representative&rdquo; because it
represents a point on the curve.
Note that _only about half_ of the curve can be mapped back.

For any given point <var>P</var> that can be mapped,
applying the inverse map then the direct map will yield the original
point <var>P</var>.

For any representative <var>r</var> in the curve&#8217;s finite field,
applying the direct map then the inverse map will yield either the
original representative <var>r</var> or its opposite
&minus;<var>r</var>.


Applicability
-------------

Elligator does not work on all elliptic curves,
and will not properly hide points on all curves where it does work.
The following conditions must hold:

- The finite field the curve is based on must have an odd
  characteristic.
  That is, it cannot be a binary field.
  In practice most curves use large prime fields, which are all odd.
  While extension fields and binary fields can sometimes be faster,
  prime fields have a more compelling security story.

- The curve is expressible in the form
  <var>v</var><sup>2</sup>&nbsp;=&nbsp;<var>u</var><sup>3</sup>&nbsp;+&nbsp;<var>A</var><var>u</var><sup>2</sup>&nbsp;+&nbsp;<var>B</var><var>u</var>,
  such that
  <var>A</var><var>B</var>(<var>A</var><sup>2</sup>&nbsp;&minus;&nbsp;4<var>B</var>)&nbsp;&ne;&nbsp;0.
  Note that this includes all Montgomery curves of the form
  <var>v</var><sup>2</sup>&nbsp;=&nbsp;<var>u</var><sup>3</sup>&nbsp;+&nbsp;<var>A</var><var>u</var><sup>2</sup>&nbsp;+&nbsp;<var>u</var>
  (except
  <var>v</var><sup>2</sup>&nbsp;=&nbsp;<var>u</var><sup>3</sup>&nbsp;+&nbsp;<var>u</var>),
  including Curve25519 and Curve448.
  In practice, almost any curve with an odd field and a point of
  order&nbsp;two can be written in this form.

- Additionally,
  for Elligator to properly hide points on the curve as random noise,
  The characteristic of its field must be very close to a power of two.
  This is because we are ultimately transmitting bit strings over the
  network,
  whose range is always a power of two.
  In practice, only Mersenne primes (2<sup><var>k</var></sup>&nbsp;&minus;&nbsp;1),
  pseudo-Mersenne primes (2<sup><var>k</var></sup>&nbsp;&minus;&nbsp;<var>c</var>),
  and _some_ Solinas primes
  (2<sup><var>k</var></sup>&nbsp;&minus;&nbsp;2<sup><var>l</var></sup>&nbsp;&hellip;&nbsp;&minus;&nbsp;1
  where <var>k</var>&nbsp;&minus;&nbsp;<var>l</var> ideally exceeds&nbsp;128)
  are adequate.

Overall, those conditions cover a wide range of curves,
including the very popular Curve25519 and Curve448.
One notable exception are short Weierstraß curves that
have a prime order and therefore lack a point of order two;
an example of a curve with a prime order is NIST&nbsp;P-256.

<aside>
Those already familiar with Elligator may realise that we are actually
talking about Elligator&nbsp;2.
That&#8217;s because Elligator&nbsp;1 is less widely applicable,
has no other compelling benefits,
and as a result has not caught on.
It is thus simpler to ignore it.
</aside>


Instantiation Parameters
------------------------

An Elligator instantiation works over a specific curve,
and has a couple parameters of its own.
Before actually defining the maps, we need to fix those parameters.

- The **finite field** GF(<var>q</var>) over which the curve operates.
  Note that <var>q</var> is always the power of a prime.
  That is, <var>q</var>&nbsp;=&nbsp;<var>p</var><sup><var>m</var></sup>,
  for some prime <var>p</var> and some strictly positive integer
  <var>m</var>.
  Most of the time though,
  we will be using a prime field,
  where <var>q</var>&nbsp;=&nbsp;<var>p</var>.
  Recall that <var>p</var>&nbsp;=&nbsp;2 is not possible because
  the field must have an odd characteristic.

  Examples of finite fields include
  GF(2<sup>255</sup>&nbsp;&minus;&nbsp;19),
  used by Curve25519,
  and
  GF(2<sup>448</sup>&nbsp;&minus;&nbsp;2<sup>224</sup>&nbsp;&minus;&nbsp;19),
  used by Curve448.

- The **elliptic curve**, defined by the equation
  <var>v</var><sup>2</sup>&nbsp;=&nbsp;<var>u</var><sup>3</sup>&nbsp;+&nbsp;<var>A</var><var>u</var><sup>2</sup>&nbsp;+&nbsp;<var>B</var><var>u</var>.

  Examples of elliptic curves include Curve25519
  (<var>A</var>&nbsp;=&nbsp;486662, <var>B</var>&nbsp;=&nbsp;1) and
  Curve448 (<var>A</var>&nbsp;=&nbsp;156326, <var>B</var>&nbsp;=&nbsp;1).

- The **non-square** <var>Z</var> in GF(<var>q</var>).
  It can be any number in GF(<var>q</var>) that has no square root.
  That is, there is no number <var>n</var> in GF(<var>q</var>) such that
  <var>n</var><sup>2</sup>&nbsp;=&nbsp;<var>Z</var>.

  We generally chose <var>Z</var> to minimise computations down the
  line, like small numbers,
  or numbers tailored to speed up specific implementations.
  With GF(2<sup>255</sup>&nbsp;&minus;&nbsp;19),
  those would be 2 and &radic;&minus;1 respectively.
  With
  GF(2<sup>448</sup>&nbsp;&minus;&nbsp;2<sup>224</sup>&nbsp;&minus;&nbsp;1),
  &minus;1 is best in all cases.

- The **set of non-negative field elements**.
  A square <var>s</var> in GF(<var>q</var>) always has two square roots:
  &radic;<var>s</var> and &minus;&radic;<var>s</var>.
  We need a way to determine which is the positive one for the direct
  and inverse maps to be deterministic.

  For prime fields GF(<var>p</var>) where
  <var>p</var>&nbsp;&equiv;&nbsp;3&nbsp;(mod&nbsp;4),
  we can pick
  &radic;<var>s</var>&nbsp;=&nbsp;<var>s</var><sup>(<var>p</var>+1)/4</sup>,
  which is the unique square root that is also a square
  (the _principal square root_).

  For other fields,
  we chose the set of non-negative field elements somewhat arbitrarily.
  Common choices are the set
  {0,&nbsp;1,&nbsp;…&nbsp;(<var>q</var>&minus;1)/2}
  or the set of even numbers.

<aside>
For the implementation of square roots and checking whether a number is
a square root in GF(<var>q</var>),
refer to [I-D.draft-irtf-cfrg-hash-to-curve-14, appendix&nbsp;I](https://tools.ietf.org/html/draft-irtf-cfrg-hash-to-curve-14#appendix-I).
</aside>


The direct map
--------------

First, we need to define the `legendre()` function;
it computes the [Legendre symbol](https://en.wikipedia.org/wiki/Legendre_symbol)
of a field element <var>f</var>:

- `legendre`(<var>f</var>)&nbsp;=&nbsp;0 if <var>f</var> is zero.
- `legendre`(<var>f</var>)&nbsp;=&nbsp;1 if <var>f</var>
  is a non-zero square.
- `legendre`(<var>f</var>)&nbsp;=&nbsp;&minus;1 if <var>f</var> is not a
  square.

This can be constructed using the square root checking functions needed
to find the chosen non-square <var>Z</var> above.
In a prime fields GF(<var>p</var>),
it can be defined as:
`legendre`(<var>f</var>)&nbsp;=&nbsp;<var>f</var><sup>(<var>p</var>&nbsp;&minus;&nbsp;1)&nbsp;/&nbsp;2</sup>.

The map itself takes any field element <var>r</var> (the
representative),
and outputs a point
<var>P</var>&nbsp;=&nbsp;(<var>u</var>,&nbsp;<var>v</var>) on the curve
as follows:

- <var>w</var>&nbsp;=&nbsp;&minus;<var>A</var>&nbsp;/&nbsp;(1&nbsp;+&nbsp;<var>Z</var>&nbsp;<var>r</var><sup>2</sup>)
- <var>e</var>&nbsp;=&nbsp;`legendre`(<var>w</var><sup>3</sup>&nbsp;+&nbsp;<var>A</var>&nbsp;<var>w</var><sup>2</sup>&nbsp;+&nbsp;<var>B</var>&nbsp;<var>w</var>)
- <var>u</var>&nbsp;=&nbsp;<var>e</var>&nbsp;<var>w</var>&nbsp;&minus;&nbsp;(1&nbsp;&minus;&nbsp;<var>e</var>)&nbsp;(<var>A</var>&nbsp;/&nbsp;2)
- <var>v</var>&nbsp;=&nbsp;&minus;<var>e</var>&nbsp;&radic;(<var>u</var><sup>3</sup>&nbsp;+&nbsp;<var>A</var>&nbsp;<var>u</var><sup>2</sup>&nbsp;+&nbsp;<var>B</var>&nbsp;<var>u</var>)
- <var>P</var>&nbsp;=&nbsp;(<var>u</var>,&nbsp;<var>v</varsity>)


The inverse map
---------------

Unlike the direct map,
the inverse map does _not_ work for all points on the curve.
It only holds for points
<var>P</var>&nbsp;=&nbsp;(<var>u</var>,&nbsp;<var>v</var>) such that:

- <var>u</var>&nbsp;&ne;&nbsp;&minus;A;
- &minus;<var>Z</var><var>u</var>(<var>u</var>&nbsp;+&nbsp;<var>A</var>)
  is a square;
- if <var>v</var>&nbsp;=&nbsp;0,
  then <var>u</var>&nbsp;=&nbsp;0 as well.

Assuming those conditions hold, the representative <var>r</var> of
<var>P</var>&nbsp;=&nbsp;(<var>u</var>,&nbsp;<var>v</var>) is computed
as follows:

- <var>r</var>&nbsp;=&nbsp;&radic;(&minus;<var>u</var>&nbsp;/&nbsp;(<var>Z</var>&nbsp;(<var>u</var>&nbsp;+&nbsp;<var>A</var>)))
  if <var>v</var> is non-negative,
- <var>r</var>&nbsp;=&nbsp;&radic;(&minus;(<var>u</var>&nbsp;+&nbsp;<var>A</var>)&nbsp;/&nbsp;(<var>Z</var>&nbsp;<var>u</var>))
  if <var>v</var> is strictly negative.

Note:
if <var>P</var>&nbsp;=&nbsp;(0,&nbsp;0) then
<var>r</var>&nbsp;=&nbsp;&radic;(&minus;0&nbsp;/&nbsp;(<var>Z</var>&nbsp;(0&nbsp;+&nbsp;<var>A</var>)))&nbsp;=&nbsp;0.

